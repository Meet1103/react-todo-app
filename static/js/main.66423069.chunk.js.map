{"version":3,"sources":["Components/TodoForm/TodoForm.js","Components/Todo/Todo.js","Components/TodoList/TodoList.js","App.js","index.js"],"names":["TodoForm","name","updateId","handleChange","handleSubmit","inputRef","className","onSubmit","type","autoFocus","autoComplete","ref","value","onChange","required","Todo","index","completed","checkTodo","updateTodo","deleteTodo","draggableId","provided","innerRef","draggableProps","dragHandleProps","onClick","TodoList","todos","droppableId","droppableProps","map","todo","id","placeholder","App","useState","setName","setTodos","useRef","setUpdateId","inputFocus","current","focus","addTodo","newTodo","uuidv4","e","target","preventDefault","find","length","onDragEnd","result","destination","reorderedTodoItems","Array","from","splice","source","reorderedItem","completedTodo","updatedTodo","remainingTodos","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66423069.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoForm.css\"\r\n\r\nconst TodoForm = ({name, updateId, handleChange, handleSubmit, inputRef}) => {\r\n  return (\r\n    <form className=\"todo-input-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"text\"\r\n        className=\"todo-input\"\r\n        autoFocus=\"on\"\r\n        autoComplete=\"off\"\r\n        ref={inputRef}\r\n        value={name}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n      <button type=\"submit\" className=\"add-todo-btn\">\r\n        {!updateId ? \"Add Todo\" : \"Save Todo\"}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;","import React from \"react\";\r\nimport {Draggable} from 'react-beautiful-dnd';\r\nimport './Todo.css'\r\n\r\nconst Todo = ({index, name ,completed, checkTodo, updateTodo, deleteTodo}) => {\r\n    return (\r\n        <Draggable draggableId={`todo-${index}`} key={index} index={index}>\r\n            {\r\n            (provided) => (\r\n                <div className={!completed ? \"todo-item\" : \"todo-item completed-todo-item\"} ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                    <li className=\"todo\">{name}</li>\r\n                    <div>\r\n                        <button className=\"checkbtn\" onClick={checkTodo}>\r\n                            <i className=\"fas fa-check-square\"></i>\r\n                        </button>\r\n                        <button className=\"updatebtn\" onClick={updateTodo}>\r\n                            <i className=\"far fa-edit\"></i>\r\n                        </button>\r\n                        <button className=\"deletebtn\" onClick={deleteTodo}>\r\n                            <i className=\"far fa-trash-alt\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </Draggable>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from 'react'\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport Todo from '../Todo/Todo'\r\nimport './TodoList.css'\r\n\r\nconst TodoList = ({todos, checkTodo, updateTodo, deleteTodo}) => {\r\n  return (\r\n        <Droppable droppableId=\"todo\">\r\n            { provided => (\r\n            <div className=\"todo-container\"  {...provided.droppableProps} ref={provided.innerRef}>\r\n            {\r\n              todos.map((todo,index) => (\r\n                <Todo\r\n                key={todo.id}\r\n                index={index}\r\n                name={todo.name}\r\n                completed={todo.completed}\r\n                checkTodo={() => checkTodo(todo.id)}\r\n                updateTodo={() => updateTodo(todo.id)}\r\n                deleteTodo={() => deleteTodo(todo.id)}\r\n                />\r\n              ))\r\n            }\r\n            {provided.placeholder}\r\n            </div>\r\n            )}\r\n        </Droppable>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { useState, useRef } from \"react\";            \r\nimport { DragDropContext } from 'react-beautiful-dnd'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport TodoForm from './Components/TodoForm/TodoForm'\r\nimport TodoList from './Components/TodoList/TodoList'\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n  const inputRef = useRef()\r\n  const [updateId, setUpdateId] = useState(null)\r\n\r\n  function onDragEnd(result) {\r\n    if (!result.destination) return;\r\n\r\n    const reorderedTodoItems = Array.from(todos);\r\n    const [reorderedItem] = reorderedTodoItems.splice(result.source.index, 1);\r\n    reorderedTodoItems.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    setTodos(reorderedTodoItems);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(updateId) {\r\n      const updateTodoValue = todos.find((todo,index) => todo.id === updateId);\r\n      updateTodoValue.name = name\r\n      setName(\"\");\r\n      setUpdateId(null)\r\n    } else {\r\n        addTodo(name);\r\n        setName(\"\");\r\n    }\r\n  }\r\n\r\n  const inputFocus = () => {\r\n    inputRef.current.focus()\r\n  }\r\n\r\n  const clearTodo = (e) => {\r\n    e.preventDefault()\r\n    setTodos([])\r\n    inputFocus()\r\n  }\r\n\r\n  const addTodo = (name) => {\r\n    const newTodo = { id:uuidv4() , name: name, completed: false };\r\n    setTodos([...todos, newTodo]);\r\n  }\r\n\r\n  const checkTodo = (id) => {\r\n    const completedTodo = todos.map((todo,index) => {\r\n      if (todo.id === id) {\r\n        return {...todo, completed: !todo.completed}\r\n      }\r\n      return todo\r\n    })\r\n    setTodos(completedTodo)\r\n  }\r\n\r\n  const updateTodo = (id) => {\r\n    const updatedTodo = todos.find((todo,index) => todo.id === id);\r\n    setName(updatedTodo.name)\r\n    setUpdateId(updatedTodo.id)\r\n    inputFocus()\r\n  }\r\n\r\n  const deleteTodo = (id) => {\r\n    const remainingTodos = todos.filter((todo,index) => todo.id !== id);\r\n    setTodos(remainingTodos);\r\n    inputFocus()\r\n  } \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"heading\">TODO APP</header>\r\n      <TodoForm name={name} updateId={updateId} handleChange={handleChange} handleSubmit={handleSubmit} inputRef={inputRef} />\r\n      {\r\n        todos.length > 0 ? (\r\n          <div>\r\n            <DragDropContext onDragEnd={onDragEnd} >\r\n              <TodoList \r\n              todos={todos}\r\n              checkTodo= {checkTodo}\r\n              updateTodo={updateTodo}\r\n              deleteTodo={deleteTodo}\r\n              />\r\n            </DragDropContext>\r\n            <button type=\"submit\" onClick={clearTodo} className=\"clear-todo-list-btn\">\r\n              Clear Todo List\r\n            </button>\r\n          </div>\r\n      ) : <p className=\"initial-text\">No Todo Added</p>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}